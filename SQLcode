create database olistfinal
use olistfinal

-- 1. orders
CREATE TABLE orders (
    order_id VARCHAR(50) PRIMARY KEY,
    customer_id VARCHAR(50),
    order_status VARCHAR(20),
    order_purchase_timestamp DATETIME,
    order_approved_at DATETIME,
    order_delivered_carrier_date DATETIME,
    order_delivered_customer_date DATETIME,
    order_estimated_delivery_date DATETIME
);
BULK INSERT orders
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_orders_dataset.csv'
WITH (
    FORMAT = 'CSV',
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '0x0a'
);

-- 2. customers
CREATE TABLE customers (
    customer_id VARCHAR(50) PRIMARY KEY,
    customer_unique_id CHAR(32),
    customer_zip_code_prefix INT,
    customer_city VARCHAR(255),
    customer_state CHAR(2)
);
BULK INSERT customers
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_customers_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 3. products
CREATE TABLE products (
    product_id VARCHAR(50) PRIMARY KEY,
    product_category_name VARCHAR(100),
    product_name_length INT,
    product_description_length INT,
    product_photos_qty INT,
    product_weight_g INT,
    product_length_cm INT,
    product_height_cm INT,
    product_width_cm INT
);
BULK INSERT products
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_products_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 4. product_categories
CREATE TABLE product_categories (
    product_category_name VARCHAR(100) PRIMARY KEY,
    product_category_name_english VARCHAR(100)
);
BULK INSERT product_categories
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\product_category_name_translation.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 5. sellers
CREATE TABLE sellers (
    seller_id VARCHAR(50) PRIMARY KEY,
    seller_zip_code_prefix INT,
    seller_city VARCHAR(100),
    seller_state CHAR(2)
);
BULK INSERT sellers
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_sellers_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 6. order_items
CREATE TABLE order_items (
    order_id VARCHAR(50),
    order_item_id INT,
    product_id VARCHAR(50),
    seller_id VARCHAR(50),
    shipping_limit_date DATETIME,
    price DECIMAL(10,2),
    freight_value DECIMAL(10,2),
    PRIMARY KEY (order_id, order_item_id)
);
BULK INSERT order_items
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_order_items_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 7. order_payments
CREATE TABLE order_payments (
    order_id VARCHAR(50),
    payment_sequential INT,
    payment_type VARCHAR(20),
    payment_installments INT,
    payment_value DECIMAL(10,2),
    PRIMARY KEY (order_id, payment_sequential)
);
BULK INSERT order_payments
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_order_payments_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);

-- 8. order_reviews
CREATE TABLE order_reviews (
    review_id CHAR(32),
    order_id VARCHAR(50),
    review_score INT,
    review_comment_title VARCHAR(MAX),
    review_comment_message VARCHAR(MAX),
    review_creation_date DATETIME2,
    review_answer_timestamp DATETIME2,
    PRIMARY KEY (review_id, order_id)
);
BULK INSERT order_reviews
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_order_reviews_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0d0a'
);
-- 9. geolocation
drop table geolocation
-- Table with surrogate key
CREATE TABLE geolocation (
    geolocation_id INT IDENTITY(1,1) PRIMARY KEY,
    geolocation_lat DECIMAL(10,7),
    geolocation_lng DECIMAL(10,7),
    geolocation_city VARCHAR(255),
    geolocation_state CHAR(2)
);

-- ZIP code table with FK to geolocation
CREATE TABLE zipcode (
    geolocation_zip_code_prefix INT PRIMARY KEY,
    geolocation_id INT FOREIGN KEY REFERENCES geolocation(geolocation_id)
);
CREATE TABLE geolocation_raw (
    geolocation_zip_code_prefix INT,
    geolocation_lat DECIMAL(10,7),
    geolocation_lng DECIMAL(10,7),
    geolocation_city VARCHAR(255),
    geolocation_state CHAR(2)
);

BULK INSERT geolocation_raw
FROM 'C:\Users\USR\OneDrive\Documents\SQL Server Management Studio\Brazilian_Dataset\olist_geolocation_dataset.csv'
WITH (
    FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '0x0a'
);
--Insert unique geolocations and assign surrogate keys
INSERT INTO zipcode (geolocation_zip_code_prefix, geolocation_id)
SELECT
    r.geolocation_zip_code_prefix,
    MIN(g.geolocation_id)  -- Choose one geolocation ID per zip
FROM geolocation_raw r
JOIN geolocation g
    ON r.geolocation_lat = g.geolocation_lat
    AND r.geolocation_lng = g.geolocation_lng
    AND r.geolocation_city = g.geolocation_city
    AND r.geolocation_state = g.geolocation_state
GROUP BY r.geolocation_zip_code_prefix;

ALTER TABLE sellers
ADD zipcode_fk INT;

ALTER TABLE customers
ADD zipcode_fk INT;

-- Update sellers
UPDATE sellers
SET zipcode_fk = z.geolocation_zip_code_prefix
FROM sellers s
JOIN zipcode z ON s.seller_zip_code_prefix = z.geolocation_zip_code_prefix;

-- Update customers
UPDATE customers
SET zipcode_fk = z.geolocation_zip_code_prefix
FROM customers c
JOIN zipcode z ON c.customer_zip_code_prefix = z.geolocation_zip_code_prefix;


ALTER TABLE sellers
ADD CONSTRAINT FK_sellers_zipcode FOREIGN KEY (zipcode_fk) REFERENCES zipcode(geolocation_zip_code_prefix);

ALTER TABLE customers
ADD CONSTRAINT FK_customers_zipcode FOREIGN KEY (zipcode_fk) REFERENCES zipcode(geolocation_zip_code_prefix);




-- 1. orders.customer_id → customers.customer_id
ALTER TABLE orders
ADD CONSTRAINT FK_orders_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

-- 2. order_items.order_id → orders.order_id
ALTER TABLE order_items
ADD CONSTRAINT FK_order_items_orders FOREIGN KEY (order_id) REFERENCES orders(order_id);

-- 3. order_items.product_id → products.product_id
ALTER TABLE order_items
ADD CONSTRAINT FK_order_items_products FOREIGN KEY (product_id) REFERENCES products(product_id);

-- 4. order_items.seller_id → sellers.seller_id
ALTER TABLE order_items
ADD CONSTRAINT FK_order_items_sellers FOREIGN KEY (seller_id) REFERENCES sellers(seller_id);

-- 5. order_payments.order_id → orders.order_id
ALTER TABLE order_payments
ADD CONSTRAINT FK_order_payments_orders FOREIGN KEY (order_id) REFERENCES orders(order_id);

-- 6. order_reviews.order_id → orders.order_id
ALTER TABLE order_reviews
ADD CONSTRAINT FK_order_reviews_orders FOREIGN KEY (order_id) REFERENCES orders(order_id);


-- 7. products.product_category_name → product_categories.product_category_name
--
--cannot directly add constraint due to two categories being missing from product_categories table
INSERT INTO product_categories (product_category_name)
SELECT DISTINCT product_category_name
FROM products
WHERE product_category_name NOT IN (
    SELECT product_category_name FROM product_categories
);
--adding FK constraint
ALTER TABLE products
ADD CONSTRAINT FK_products_product_categories FOREIGN KEY (product_category_name) REFERENCES product_categories(product_category_name);
 --                     TASK 2 <3
--ORDERS


--A
SELECT (
		(SELECT COUNT(order_id)*100 FROM orders WHERE order_delivered_customer_date > order_estimated_delivery_date) /
		(SELECT COUNT(order_id)*1.0 FROM orders)  
	   ) AS percentage_orders_delayed;

--B
SELECT MONTH(order_delivered_customer_date) AS peak_order_delay_months, COUNT(order_id) AS total_delays
FROM orders
WHERE order_delivered_customer_date > order_estimated_delivery_date
GROUP BY MONTH(order_delivered_customer_date)
ORDER BY total_delays DESC;

--C
SELECT TOP 1 customer_state, COUNT(customer_state) as Orders_delayed
FROM customers
WHERE customer_id IN (SELECT customer_id FROM orders
					 WHERE order_delivered_customer_date > order_estimated_delivery_date)
GROUP BY customer_state
ORDER BY Orders_delayed DESC;

--D
SELECT YEAR(order_purchase_timestamp) AS order_year, COUNT(order_id) as Pending_orders
FROM Orders
WHERE order_delivered_customer_date IS NULL
  OR order_status NOT LIKE 'delivered'
GROUP BY YEAR(order_purchase_timestamp);

--E
SELECT S.seller_id, AVG(DATEDIFF(DAY, order_delivered_customer_date, order_estimated_delivery_date)) as avg_delay_in_days
FROM sellers AS S, order_items AS OI, orders AS O
WHERE O.order_id = OI.order_ID
  AND S.seller_id = OI.seller_id
GROUP BY S.seller_id;

--F
SELECT AVG(freight_value) AS avg_shipping_cost_delayed_orders
FROM order_items AS OI, orders AS O
WHERE order_delivered_customer_date > order_estimated_delivery_date
 AND  O.order_id = OI.order_id;

SELECT AVG(freight_value) AS avg_shipping_cost_onTime_orders
FROM order_items AS OI, orders AS O
WHERE order_delivered_customer_date <= order_estimated_delivery_date
 AND  O.order_id = OI.order_id;

 --G
 SELECT TOP 1 P.product_category_name, PC.product_category_name_english, COUNT(P.product_category_name) as orders_delayed
 FROM products AS P, product_categories AS PC
 WHERE P.product_category_name = PC.product_category_name
  AND P.product_id IN (SELECT product_id FROM order_items WHERE order_id IN 
					   (SELECT order_id FROM orders WHERE order_delivered_customer_date > order_estimated_delivery_date))
GROUP BY P.product_category_name, PC.product_category_name_english
ORDER BY orders_delayed DESC;

--H
SELECT AVG(items) as avg_items_delayed_orders
FROM (SELECT order_id, COUNT(order_id) as items FROM order_items GROUP BY order_id) AS TempTable
WHERE order_id IN (SELECT order_id FROM orders WHERE order_delivered_customer_date > order_estimated_delivery_date);

SELECT AVG(items) as avg_items_onTime_orders
FROM (SELECT order_id, COUNT(order_id) as items FROM order_items GROUP BY order_id) AS TempTable
WHERE order_id IN (SELECT order_id FROM orders WHERE order_delivered_customer_date <= order_estimated_delivery_date);

--Customer_Analysis
--A
SELECT (
		(SELECT COUNT(customer_id)*100 
		 FROM customers 
		 WHERE customer_id IN (SELECT customer_id 
							   FROM orders 
							   GROUP BY customer_id 
							   HAVING COUNT(order_id)=1))
		/
		(SELECT COUNT(customer_id)*1.0 FROM customers)  
	   ) AS percentage_of_customers_with_1_order;

--B
SELECT TOP 5 customer_city, COUNT(customer_city) as repeat_customers
FROM customers
WHERE customer_id IN (SELECT customer_id 
					  FROM orders 
					  GROUP BY customer_id 
					  HAVING COUNT(order_id)>1)
GROUP BY customer_city
ORDER BY repeat_customers DESC;




--C
SELECT customer_state, AVG(orderTotal) AS avg_orderPrice_per_State
FROM customers c
JOIN orders o
ON c.customer_id = o.customer_id
JOIN
(SELECT order_id, SUM(price) AS orderTotal
FROM order_items oi
GROUP BY order_id) AS t1
ON t1.order_id = o.order_id
GROUP BY customer_state;

--D
SELECT TOP 10 customer_id, COUNT(order_id) AS numOrdersPlaced
FROM orders
GROUP BY customer_id
ORDER BY numOrdersPlaced DESC;

--E
SELECT c.customer_id, AVG(deliveryTime) AS avg_deliveryTime_inDays
FROM customers c
JOIN (SELECT order_id,customer_id,
	  DATEDIFF(DAY,order_delivered_carrier_date,order_delivered_customer_date) AS deliveryTime
	  FROM orders) AS t1
ON t1.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY avg_deliveryTime_inDays DESC;

--F
SELECT orderYear, AVG(ordersPerCustomer) as avg_orders_per_cust_per_yr
FROM (SELECT customer_id, YEAR(order_purchase_timestamp) as orderYear, COUNT(order_id) AS ordersPerCustomer
	  FROM orders 
	  GROUP BY customer_id, YEAR(order_purchase_timestamp)) AS t1
GROUP BY orderYear;

--G
SELECT TOP 5 customer_id, SUM(orderTotal) AS totalSpent
FROM orders o 
JOIN (SELECT order_id, SUM(price) AS orderTotal
	  FROM order_items oi
	  GROUP BY order_id) AS t1
ON o.order_id = t1.order_id
WHERE YEAR(o.order_purchase_timestamp) = 2017
GROUP BY customer_id
ORDER BY totalSpent DESC;

--H
SELECT customer_id, COUNT(order_id) AS canceledOrders
FROM orders
WHERE order_status='canceled'
GROUP BY customer_id
ORDER BY canceledOrders DESC;

--Product_Analysis
--A

CREATE VIEW highestSalesProdCatgInState AS
SELECT p.product_category_name, pc.product_category_name_english, c.customer_state, SUM(totalSalesP) AS totalSalesInStateByCatg
FROM products p
JOIN product_categories pc
ON p.product_category_name = pc.product_category_name 
JOIN (SELECT order_id, product_id, SUM(price) AS totalSalesP
	  FROM order_items
	  GROUP BY order_id,product_id) AS t1
ON t1.product_id = p.product_id
JOIN orders o
ON o.order_id = t1.order_id
JOIN customers c
ON o.customer_id = c.customer_id
GROUP BY p.product_category_name, pc.product_category_name_english, c.customer_state;

SELECT h1.customer_state, h1.product_category_name_english, h1.totalSalesInStateByCatg
FROM highestSalesProdCatgInState h1
JOIN (
    SELECT customer_state, MAX(totalSalesInStateByCatg) AS max_sales
    FROM highestSalesProdCatgInState
    GROUP BY customer_state
) h2
ON h1.customer_state = h2.customer_state
AND h1.totalSalesInStateByCatg = h2.max_sales
ORDER BY h1.customer_state;



--B
CREATE VIEW productCatg_orderHour AS 
SELECT product_category_name, product_category_name_english, orderHour, COUNT(product_id) AS productsOrdered
FROM (
	  SELECT p.product_id, DATEPART(HOUR,o.order_purchase_timestamp) AS orderHour,p.product_category_name,pc.product_category_name_english
	  FROM products p
	  JOIN (SELECT order_id, product_id
			FROM order_items
			GROUP BY order_id,product_id) AS t1
	  ON t1.product_id = p.product_id
	  JOIN orders o
	  ON o.order_id = t1.order_id 
	  JOIN product_categories pc
	  ON p.product_category_name = pc.product_category_name) AS t2
GROUP BY product_category_name, product_category_name_english, orderHour;

SELECT t1.product_category_name, product_category_name_english,orderHour,products_ordered
FROM productCatg_orderHour as t1
JOIN (SELECT product_category_name,MAX(productsOrdered) AS products_ordered
	  FROM productCatg_orderHour
	  GROUP BY product_category_name) AS t2
ON t1.product_category_name = t2.product_category_name
AND t1.productsOrdered = t2.products_ordered
ORDER BY t1.product_category_name;
--C
SELECT TOP 5 p.product_category_name, product_category_name_english, COUNT(DISTINCT delayed.order_id) AS numOrdersDelayed
FROM products p
JOIN order_items oi
ON p.product_id = oi.product_id
JOIN (SELECT order_id
	  FROM orders
	  WHERE order_delivered_customer_date > order_estimated_delivery_date) AS delayed
ON delayed.order_id = oi.order_id
JOIN product_categories pc
ON p.product_category_name = pc.product_category_name
GROUP BY p.product_category_name, product_category_name_english
ORDER BY numOrdersDelayed DESC;

--D
SELECT product_id, AVG(price) AS avgPrice, COUNT(product_id) AS totalSales 
FROM order_items
GROUP BY product_id
ORDER BY avgPrice DESC;

--E
SELECT oi1.product_id, oi2.product_id, COUNT(*) AS timesBoughtAsPair
FROM order_items oi1
JOIN order_items oi2
ON oi1.order_id = oi2.order_id 
WHERE oi1.product_id < oi2.product_id
GROUP BY oi1.product_id, oi2.product_id
ORDER BY timesBoughtAsPair DESC;

--F
SELECT p.product_category_name, pc.product_category_name_english, SUM(oi.price) AS totalRevenuePerCatg
FROM order_items oi
JOIN products p
ON p.product_id = oi.product_id
JOIN product_categories pc
ON pc.product_category_name = p.product_category_name
GROUP BY p.product_category_name, pc.product_category_name_english;

--G
SELECT p.product_category_name, pc.product_category_name_english, AVG(review_score) AS avgReviewScorePerCatg
FROM order_items oi
JOIN order_reviews o_r
ON oi.order_id = o_r.order_id
JOIN products p
ON p.product_id = oi.product_id
JOIN product_categories pc
ON pc.product_category_name = p.product_category_name
GROUP BY p.product_category_name, pc.product_category_name_english;

--H
SELECT TOP 5 product_id, SUM(oi.price) AS totalRevenue
FROM order_items oi
GROUP BY product_id
ORDER BY totalRevenue DESC;

--Sellers and shipment analysis
--A
select s.seller_id,count(ot.order_id) as num_cancelled_orders, (count(ot.order_id)*1.0/(select count(order_id) from orders )) as return_rate
from  orders o  join order_items ot on ot.order_id=o.order_id
right join sellers s on ot.seller_id=s.seller_id
where o.order_status='canceled'
group by s.seller_id


--B
select s.seller_id,avg(ot.price) as avg_price
from sellers s left join order_items ot on ot.seller_id=s.seller_id
group by s.seller_id
order by avg(ot.price) desc

--C

select s.seller_id,sum(ot.price-ot.freight_value) as profit_margin
from order_items ot join sellers s on ot.seller_id=s.seller_id
group by s.seller_id

--D
--here we used 'case' for visual understanding 
SELECT 
    CASE 
        WHEN (o.order_delivered_customer_date > o.order_estimated_delivery_date) THEN 'Delayed'
        ELSE 'On Time'
    END AS delivery_status,
    AVG(ot.freight_value) AS avg_shipping_cost
FROM orders o
JOIN order_items ot ON ot.order_id = o.order_id
GROUP BY o.order_status,order_delivered_customer_date,o.order_estimated_delivery_date;


--E
select  count(order_id) as delayed_shipments_2017
from orders
where order_delivered_customer_date < order_estimated_delivery_date 
		and YEAR(order_purchase_timestamp) = '2017'

--F
select o.order_id,avg(ot.freight_value) as avg_shipping_cost
from orders o join order_items ot on ot.order_id=o.order_id
where o.order_delivered_customer_date < o.order_estimated_delivery_date
group by o.order_id
--G
select s.seller_id, sum(ot.freight_value) as total_freight_cost
from sellers s left join  order_items ot on s.seller_id=ot.seller_id
group by s.seller_id

--                                     TASK 3 <3
-- done in report!!!!
